# -- Attribute Map
# Set the attribute names that the IDP provides
# these will be translated into internal names
saml.attributes.email=urn:mace:dir:attribute-def:mail
saml.attributes.givenname=urn:mace:dir:attribute-def:givenName
saml.attributes.surname=urn:mace:dir:attribute-def:sn
saml.attributes.prefix=snPrefix
saml.attributes.organization=urn:mace:terena.org:attribute-def:schacHomeOrganization
saml.attributes.role=urn:mace:dir:attribute-def:eduPersonAffiliation
saml.attributes.principal=urn:mace:dir:attribute-def:eduPersonPrincipalName

# -- User Role Selection
# Set access lists to determine role access. 
# Roles will be validated in the order admin > creator > user.
# If no access list matches, the user will not be allowed to log in to DVN
# 
# The syntax is
#   attributes := "email"|"givenname"|"surname"|"prefix"|"organization"|"role"|"principal"
#   value := ( ALPHANUM | SPACE )* | "*"
#   equation := attribute EQ value
#   EQ = "=" | "!="
#   AND = "&"
#   OR = "|"
#   criteria = equation ( AND equation )*
#   acl = criteria ( OR criteria )*
#
# In other words:
#   attributes can be required by attributename=value
#   value can be either the real value, or an asterisk to allow any value, eg:
#     role=employee
#     role=*
#   multiple requirements can be combined (as a logical AND) using the ampersand
#   sign, eg.:
#     role=employee&email=*
#     (user must be employee and have an email address)
#   multiple sets of requirements can be combined (as logical OR) using the pipe
#   sign, eg.:
#     role=employee&email=*|organization=example.com
#     (user must be employee and have an email address) OR (user must belong to
#      organization "example.com")
#
# If the ACL is empty, it will resolve to false.     
saml.access.admin=
# saml.access.creator=email=*&role=employee&organization=uu.nl
saml.access.creator=email=*&organization=uu.nl
saml.access.user=email=*

# -- Admin Access
# Allow admin access through SAML: yes or no
saml.access.allow.admin=no

# -- User name creation
# Set the method used to generate a user id.
# A DVN user id may consist only of alphanumeric characters
#
# Two methods:
# - uuid: a unique string will be generated and used as the user id
# - attr: a selected attribute will be used as the base for a new user id.
#         All non-alphanumeric symbols will be stripped.
#         If the base name is not unique, a numeric value will be appended
#         until it is unique. The default attribute is email. 
#         Other usable attributes are givenname, surname and principal.
# 
# In order to make sure that a username does not conflict with existing 
# user names for other authentication methods, a prefix can be added when the 
# attr method is used.
saml.username.method=attr
saml.username.attribute=email
saml.username.prefix=

# -- Referer
# Use the referer header to determin where to redirect the session after
# login in. Set to yes to enable. Default is not to use the referer. The user
# will be directed to the main page.
# 
# saml.redirect.referer=yes

# -- Single Logout
# Specifiy whether the Iddentity Provider supports single logout and whether you
# want to use it. Set to "yes" to enable single logout. The default is "no".
saml.logout.support=no

# If you do not use the single logout, you can set a message that is show to
# the user to make clear that a real logout can only be established by 
# closing the browser or cleaning cookies.
saml.logout.message=Please close your browser to make sure that your sessions are cleaned up properly, and to prevent unauthorized access to your account
 